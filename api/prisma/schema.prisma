// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Avatars {
  id        Int @id @default(autoincrement()) @map("_id")
  url       String
  path      String
  user      User   @relation(fields: [userId], references: [id])
  userId    Int @unique
}

model User {
  id           Int      @id @default(autoincrement()) @map("_id")
  idMember     String   @unique
  name         String 
  email        String?   @unique
  password     String   @db.LongText()
  avatar       Avatars?
  role         String    
  token        String?    @db.LongText()
  joinDate     DateTime   @db.Date()
  parentId      Int?
  leaderSignedId     Int?
  profile      UserProfile?
  product      Product[]
  switchProduct   SwitchProduct[]
  cart         Cart[]
  order        Order[]
  income        Income[]
  fee        Fee[]
  promotion        Promotion[]
  todos        Todo[]
  payment        Payment[]
  closing        Closing[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Promotion {
  id       Int      @id @default(autoincrement()) @map("_id")
  user     User     @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId   Int      @unique
  from     String
  to       String
  promotionDate  DateTime   @db.Date()
}

model Todo {
  id       Int      @id @default(autoincrement()) @map("_id")
  user     User     @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId   Int      @unique
  name     String
  isCompleted       Boolean
  targetDate  DateTime   @db.Date()
}

model UserProfile {
   id       Int      @id @default(autoincrement()) @map("_id")
   user     User     @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
   userId   Int      @unique
}

model Product {
   id             Int      @id @default(autoincrement()) @map("_id")
   aromaLama      String
   aromaBaru      String
   stock          Int
   codeProduct    String
   closing        Closing[]
   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   userId         Int    
   cart           Cart[]
}

model SwitchProduct {
   id             Int      @id @default(autoincrement()) @map("_id")
   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   userId         Int
   sellerId       Int?
   qty            Int  
   oldCodeProduct String
   newCodeProduct String
   oldNameProd    String?
   newNameProd    String?
   isConfirm      Boolean
   switchDate     DateTime   @db.Date()
   createdAt      DateTime @default(now())
   updatedAt      DateTime @updatedAt
}

model Cart {
   id             Int      @id @default(autoincrement()) @map("_id")
   qty            Int
   price          String
   userId         Int   
   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   productId      Int     
   codeProduct    String     
}

model Order {
  id              Int      @id @default(autoincrement()) @map("_id")
  noOrder         String
  orderDate       DateTime   @db.Date()
  isConfirm       Boolean
  totalPrice      String
  amountTrf       String
  amountCash      String
  remainingAmount String
  sellerId        Int?
  cartData        String @db.LongText()  
  userId          Int   
  fee             Fee?
  payment         Payment[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Payment {
   id              Int      @id @default(autoincrement()) @map("_id")
   orderId         Int        
   order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   amountTrf       String?
   amountCash      String?
   paymentDate     DateTime   @db.Date()
   isConfirm       Boolean
   userId          Int   
   user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   createdAt       DateTime @default(now())
   updatedAt       DateTime @updatedAt
}

model Fee {
   id              Int      @id @default(autoincrement()) @map("_id")
   orderId         Int      @unique   
   order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   fee             String
   feeDate         DateTime   @db.Date()
   userId          Int   
   user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   createdAt       DateTime @default(now())
   updatedAt       DateTime @updatedAt
}

model Income{
   id              Int      @id @default(autoincrement()) @map("_id")
   name            String?
   qty             Int?
   modal           String?
   value           String
   type            String
   remarks         String 
   incomeDate      DateTime   @db.Date()
   userId          Int   
   user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   createdAt       DateTime @default(now())
   updatedAt       DateTime @updatedAt
}

model Closing {
   id              Int      @id @default(autoincrement()) @map("_id")
   noOrder         String
   customerName    String
   orderDate       DateTime   @db.Date()
   isConfirm       Boolean
   totalPrice      String
   qty             Int
   productId       Int   
   product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   userId          Int   
   user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   createdAt       DateTime @default(now())
   updatedAt       DateTime @updatedAt
}