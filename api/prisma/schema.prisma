// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Avatars {
  id        Int @id @default(autoincrement()) @map("_id")
  url       String
  path      String
  user      User   @relation(fields: [userId], references: [id])
  userId    Int @unique
}

model User {
  id           Int      @id @default(autoincrement()) @map("_id")
  idMember     String   @unique
  name         String 
  email        String?   @unique
  password     String   @db.LongText()
  avatar       Avatars?
  role         String    
  token        String?    @db.LongText()
  joinDate     DateTime   @db.Date()
  parentId      Int?
  leaderSignedId     Int?
  profile      UserProfile?
  product      Product[]
  cart         Cart[]
  order        Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserProfile {
   id       Int      @id @default(autoincrement()) @map("_id")
   user     User     @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
   userId   Int      @unique
}

model Product {
   id             Int      @id @default(autoincrement()) @map("_id")
   aromaLama      String
   aromaBaru      String
   stock          Int
   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   userId         Int    
   cart           Cart[]
}

model Cart {
   id             Int      @id @default(autoincrement()) @map("_id")
   qty            Int
   price          String
   userId         Int   
   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   productId      Int      
}

model Order {
  id              Int      @id @default(autoincrement()) @map("_id")
  noOrder         String
  orderDate       DateTime   @db.Date()
  method          String
  totalPrice      String
  amountPaid      String
  remainingAmount String
  userId          Int   
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}